{
  "service": {
    "service": "space-address-book",
    "serviceObject": {
      "name": "space-address-book"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-west-2",
      "appName": "space",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::ImportValue": "AppDynamoDbTableArn-dev"
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::ImportValue": "AppDynamoDbTableArn-dev"
                  },
                  "/*"
                ]
              ]
            }
          ]
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateIdentityLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/space-address-book-dev-createIdentity"
            }
          },
          "GetIdentityByUsernameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/space-address-book-dev-getIdentityByUsername"
            }
          },
          "GetIdentityByAddressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/space-address-book-dev-getIdentityByAddress"
            }
          },
          "GetMultipleIdentitiesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/space-address-book-dev-getMultipleIdentities"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "space-address-book",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/space-address-book-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/space-address-book-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "space-address-book",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-5rBZltHQxV2xGYtNMt"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "CreateIdentityLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetIdentityByUsernameLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetIdentityByAddressLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetMultipleIdentitiesLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CreateIdentityLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z/space-address-book.zip"
              },
              "FunctionName": "space-address-book-dev-createIdentity",
              "Handler": "s_createIdentity.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev"
                }
              }
            },
            "DependsOn": [
              "CreateIdentityLogGroup"
            ]
          },
          "CreateIdentityLambdaVersion0ZXl2twZf0aRHWk879ytlIqw37eZ4SOvdsJsakHt7AU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateIdentityLambdaFunction"
              },
              "CodeSha256": "QjOC/Y8qIDl0n5gMkQhYcmKu4kCewc/PsX+1b3O0d1s="
            }
          },
          "GetIdentityByUsernameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z/space-address-book.zip"
              },
              "FunctionName": "space-address-book-dev-getIdentityByUsername",
              "Handler": "s_getIdentityByUsername.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev"
                }
              }
            },
            "DependsOn": [
              "GetIdentityByUsernameLogGroup"
            ]
          },
          "GetIdentityByUsernameLambdaVersionx6IWhomA7hHknDKNoVEN7AG2JSOiRpp709IBmy5chO0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetIdentityByUsernameLambdaFunction"
              },
              "CodeSha256": "QjOC/Y8qIDl0n5gMkQhYcmKu4kCewc/PsX+1b3O0d1s="
            }
          },
          "GetIdentityByAddressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z/space-address-book.zip"
              },
              "FunctionName": "space-address-book-dev-getIdentityByAddress",
              "Handler": "s_getIdentityByAddress.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev"
                }
              }
            },
            "DependsOn": [
              "GetIdentityByAddressLogGroup"
            ]
          },
          "GetIdentityByAddressLambdaVersionLymoLg2LfQ3YvxNoPrHjSFyEIkEbeE6mzQe6FjUV0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetIdentityByAddressLambdaFunction"
              },
              "CodeSha256": "QjOC/Y8qIDl0n5gMkQhYcmKu4kCewc/PsX+1b3O0d1s="
            }
          },
          "GetMultipleIdentitiesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z/space-address-book.zip"
              },
              "FunctionName": "space-address-book-dev-getMultipleIdentities",
              "Handler": "s_getMultipleIdentities.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev"
                }
              }
            },
            "DependsOn": [
              "GetMultipleIdentitiesLogGroup"
            ]
          },
          "GetMultipleIdentitiesLambdaVersionj4dwQIhE8WxPtf64EHFrHa2DOcEqxycSPGuz7sayk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMultipleIdentitiesLambdaFunction"
              },
              "CodeSha256": "QjOC/Y8qIDl0n5gMkQhYcmKu4kCewc/PsX+1b3O0d1s="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-space-address-book",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceIdentities": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "identities",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdentitiesUsername": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIdentities"
              },
              "PathPart": "username",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdentitiesUsernameUsernameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIdentitiesUsername"
              },
              "PathPart": "{username}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdentitiesAddress": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIdentities"
              },
              "PathPart": "address",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdentitiesAddressAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIdentitiesAddress"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIdentitiesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentities"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIdentitiesUsernameUsernameVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentitiesUsernameUsernameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIdentitiesAddressAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentitiesAddressAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIdentitiesPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "definitions": {},
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "title": "Create Identity",
                "required": [
                  "username",
                  "publicKey"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "title": "Username",
                    "description": "Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.",
                    "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|-(?=[a-zA-Z\\d])){0,38}$"
                  },
                  "publicKey": {
                    "type": "string",
                    "title": "Public Key",
                    "description": "Public key generated from ed25519 algorithm (without 0x prefix, 64 characters long)",
                    "pattern": "^[a-fA-F\\d]{64}$"
                  }
                }
              }
            }
          },
          "ApiGatewayMethodIdentitiesPostValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true
            }
          },
          "ApiGatewayMethodIdentitiesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentities"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateIdentityLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayMethodIdentitiesPostValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIdentitiesPostApplicationJsonModel"
                }
              }
            }
          },
          "ApiGatewayMethodIdentitiesUsernameUsernameVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.username": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentitiesUsernameUsernameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetIdentityByUsernameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodIdentitiesAddressAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.address": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentitiesAddressAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetIdentityByAddressLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodIdentitiesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdentities"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetMultipleIdentitiesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1595184952515": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodIdentitiesOptions",
              "ApiGatewayMethodIdentitiesUsernameUsernameVarOptions",
              "ApiGatewayMethodIdentitiesAddressAddressVarOptions",
              "ApiGatewayMethodIdentitiesPost",
              "ApiGatewayMethodIdentitiesUsernameUsernameVarGet",
              "ApiGatewayMethodIdentitiesAddressAddressVarGet",
              "ApiGatewayMethodIdentitiesGet"
            ]
          },
          "CreateIdentityLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateIdentityLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetIdentityByUsernameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetIdentityByUsernameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetIdentityByAddressLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetIdentityByAddressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetMultipleIdentitiesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMultipleIdentitiesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/space-address-book-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "space-address-book",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z/custom-resources.zip"
              },
              "FunctionName": "space-address-book-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "CloudWatchLogsSubscriptionFilterCreateIdentityLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:5rBZltHQxV2xGYtNMt#hfFtJg34YWf8BRqjtG#space-address-book#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateIdentityLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetIdentityByUsernameLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:5rBZltHQxV2xGYtNMt#hfFtJg34YWf8BRqjtG#space-address-book#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetIdentityByUsernameLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetIdentityByAddressLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:5rBZltHQxV2xGYtNMt#hfFtJg34YWf8BRqjtG#space-address-book#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetIdentityByAddressLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetMultipleIdentitiesLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:5rBZltHQxV2xGYtNMt#hfFtJg34YWf8BRqjtG#space-address-book#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetMultipleIdentitiesLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:5rBZltHQxV2xGYtNMt#hfFtJg34YWf8BRqjtG#space-address-book#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            }
          },
          "CreateIdentityLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateIdentityLambdaVersion0ZXl2twZf0aRHWk879ytlIqw37eZ4SOvdsJsakHt7AU"
            }
          },
          "GetIdentityByUsernameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetIdentityByUsernameLambdaVersionx6IWhomA7hHknDKNoVEN7AG2JSOiRpp709IBmy5chO0"
            }
          },
          "GetIdentityByAddressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetIdentityByAddressLambdaVersionLymoLg2LfQ3YvxNoPrHjSFyEIkEbeE6mzQe6FjUV0"
            }
          },
          "GetMultipleIdentitiesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMultipleIdentitiesLambdaVersionj4dwQIhE8WxPtf64EHFrHa2DOcEqxycSPGuz7sayk"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "custom": {
      "jetpack": {
        "base": "../../"
      }
    },
    "plugins": [
      "serverless-jetpack"
    ],
    "pluginsData": {},
    "functions": {
      "createIdentity": {
        "handler": "s_createIdentity.handler",
        "environment": {
          "ENV": "dev"
        },
        "events": [
          {
            "http": {
              "method": "post",
              "path": "identities",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "definitions": {},
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "title": "Create Identity",
                    "required": [
                      "username",
                      "publicKey"
                    ],
                    "properties": {
                      "username": {
                        "type": "string",
                        "title": "Username",
                        "description": "Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|-(?=[a-zA-Z\\d])){0,38}$"
                      },
                      "publicKey": {
                        "type": "string",
                        "title": "Public Key",
                        "description": "Public key generated from ed25519 algorithm (without 0x prefix, 64 characters long)",
                        "pattern": "^[a-fA-F\\d]{64}$"
                      }
                    }
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "space-address-book-dev-createIdentity",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateIdentityLambdaVersion0ZXl2twZf0aRHWk879ytlIqw37eZ4SOvdsJsakHt7AU"
      },
      "getIdentityByUsername": {
        "handler": "s_getIdentityByUsername.handler",
        "environment": {
          "ENV": "dev"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "identities/username/{username}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.username": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "space-address-book-dev-getIdentityByUsername",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetIdentityByUsernameLambdaVersionx6IWhomA7hHknDKNoVEN7AG2JSOiRpp709IBmy5chO0"
      },
      "getIdentityByAddress": {
        "handler": "s_getIdentityByAddress.handler",
        "environment": {
          "ENV": "dev"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "identities/address/{address}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.address": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "space-address-book-dev-getIdentityByAddress",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetIdentityByAddressLambdaVersionLymoLg2LfQ3YvxNoPrHjSFyEIkEbeE6mzQe6FjUV0"
      },
      "getMultipleIdentities": {
        "handler": "s_getMultipleIdentities.handler",
        "environment": {
          "ENV": "dev"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "identities",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "space-address-book-dev-getMultipleIdentities",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetMultipleIdentitiesLambdaVersionj4dwQIhE8WxPtf64EHFrHa2DOcEqxycSPGuz7sayk"
      }
    },
    "serviceFilename": "serverless.yml",
    "app": "space-app",
    "org": "danielterminal",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "appUid": "hfFtJg34YWf8BRqjtG",
    "orgUid": "5rBZltHQxV2xGYtNMt"
  },
  "package": {
    "artifactDirectoryName": "serverless/space-address-book/dev/1595184962898-2020-07-19T18:56:02.898Z",
    "artifact": "space-address-book.zip"
  }
}