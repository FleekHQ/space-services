service:
  name: ${self:provider.appName}-billing

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage}
  appName: space
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
        - Fn::Join:
          - ""
          - - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
            - "/*"

plugins:
  - serverless-jetpack

custom:
  jetpack:
    base: "../../"

package:
  exclude:
    - "**/node_modules/aws-sdk/**" # included on Lambda.

functions:
  claimWallet:
    handler: dist/index.claimWallet
    environment:
      ENV: ${self:provider.stage}
    events:
      - http:
          method: post
          path: /wallet/{key}
          cors: true
          authorizer: arn:aws:lambda:${self:provider.region}:${ssm:org-arn}:function:space-rest-${self:provider.stage}-authorizer
          request:
            parameters:
              paths:
                key: true

  createStripeSubscription:
    handler: dist/stripe/create-subscription.handler
    environment:
      ENV: ${self:provider.stage}
      STRIPE_SECRET: ${ssm:stripe-sk-${self:provider.stage}~true}
    events:
      - http:
          method: post
          path: /stripe/create-subscription
          cors: true

  stripeWebhook:
    handler: dist/stripe/webhook.handler
    environment:
      ENV: ${self:provider.stage}
      STRIPE_SECRET: ${ssm:stripe-sk-${self:provider.stage}~true}
      STRIPE_WEBHOOK_SECRET: ${ssm:stripe-wh-${self:provider.stage}~true}
    events:
      - http:
          method: post
          path: /stripe/webhook
          cors: true