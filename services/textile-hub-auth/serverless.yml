service:
  name: ${self:provider.appName}-textile-hub-auth

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage}
  appName: space
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        - "arn:aws:ssm:${self:provider.region}:*:parameter/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
        - Fn::Join:
          - ""
          - - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
            - "/*"

plugins:
  - serverless-jetpack

custom:
  jetpack:
    base: "../../"

package:
  exclude:
    - "**/node_modules/aws-sdk/**" # included on Lambda.

functions:
  websocket:
    provisionedConcurrency: 5
    handler: dist/index.handler
    timeout: 15
    environment:
      JWT_SECRET: ${ssm:txl-hub-jwt-secret-${self:provider.stage}~true}
      TXL_USER_KEY: ${ssm:txl-user-key-${self:provider.stage}~true}
      TXL_USER_SECRET: ${ssm:txl-user-secret-${self:provider.stage}~true}
      TXL_HUB_URL: ${ssm:txl-hub-url-${self:provider.stage}~true}
      ENV: ${self:provider.stage}
      APIG_ENDPOINT:
        Fn::Join:
          - ''
          - - Ref: WebsocketsApi
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${self:provider.stage}
    events:
      - websocket:
          route: $connect
      - websocket:
          route: token
      - websocket:
          route: challenge
      - websocket:
          route: $default
      - websocket:
          route: $disconnect
  authorizerFunc:
    handler: dist/authorizer.handler
    environment:
      JWT_SECRET: ${ssm:txl-hub-jwt-secret-${self:provider.stage}~true}

  changeUsername:
    memorySize: 128
    handler: dist/changeUsername.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/username
          method: POST
          authorizer:
            name: authorizerFunc
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0

  updateIdentity:
    memorySize: 128
    handler: dist/updateIdentity.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity
          method: PUT
          authorizer:
            name: authorizerFunc
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
  uploadAvatar:
    memorySize: 128
    handler: dist/uploadAvatar.handler
    environment:
      REGION: ${self:provider.region}
      IPFS_HOST: ${ssm:space-ipfs-host-${self:provider.stage}~true}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/avatar
          method: POST
          authorizer:
            name: authorizerFunc
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
    # VPC configuration is needed if your IPFS node sits inside private subnet
    vpc:
      securityGroupIds:
        - ${ssm:space-ipfs-sg}
      subnetIds:
        - ${ssm:space-ipfs-subnet}