service:
  name: ${self:provider.appName}-rest

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage}
  appName: space
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
        - Fn::Join:
          - ""
          - - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
            - "/*"
  domain:
    dev: api-dev.space.storage
    stg: api-stg.space.storage
    prd: api.space.storage

plugins:
  - serverless-jetpack
  - serverless-domain-manager

custom:
  jetpack:
    base: "../../"
  customDomain:
    domainName: ${self:provider.domain.${self:provider.stage}}
    certificateArn: ${ssm:space-api-edge-certificate-arn}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
package:
  exclude:
    - "**/node_modules/aws-sdk/**" # included on Lambda.

functions:
  authorizer:
    handler: dist/authorizer.handler
    environment:
      JWT_SECRET: ${ssm:txl-hub-jwt-secret-${self:provider.stage}~true}

  identities:
    handler: dist/identities.handler
    environment:
      ENV: ${self:provider.stage}
    events:
      - http:
          path: /identities
          method: GET

  updateIdentity:
    memorySize: 128
    handler: dist/updateIdentity.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity
          method: PUT
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/updateIdentity.json)}
  deleteIdentity:
    memorySize: 128
    handler: dist/deleteIdentity.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity
          method: DELETE
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
  createProof:
    memorySize: 128
    handler: dist/createProof.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/proofs
          method: POST
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/createProof.json)}
  addEthAddress:
    memorySize: 128
    handler: dist/addEthAddress.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /add-eth-address
          method: POST
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/addEthAddress.json)}
  uploadAvatar:
    memorySize: 128
    handler: dist/uploadAvatar.handler
    environment:
      REGION: ${self:provider.region}
      IPFS_HOST: ${ssm:space-ipfs-host-${self:provider.stage}~true}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/avatar
          method: POST
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
    # VPC configuration is needed if your IPFS node sits inside private subnet
    vpc:
      securityGroupIds:
        - ${ssm:space-ipfs-sg}
      subnetIds:
        - ${ssm:space-ipfs-subnet}
  addresses:
    memorySize: 128
    handler: dist/addresses.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/addresses
          method: GET
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0