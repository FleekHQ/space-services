service:
  name: ${self:provider.appName}-rest

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage}
  appName: space
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
        - Fn::Join:
            - ''
            - - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
              - '/*'
    - Effect: Allow
      Action:
        - SES:SendEmail
        - SES:SendRawEmail
      Resource: '*'
    - Effect: Allow
      Action:
        - "appsync:Graphql"
      Resource:
        - "arn:aws:appsync:us-west-2:768127979193:apis/${self:provider.appSyncId.${self:provider.stage}}/types/*/fields/*"
    - Effect: Allow 
      Action: 
        - kinesis:DescribeStream
        - kinesis:PutRecord
        - kinesis:PutRecords
        - kinesis:GetShardIterator
        - kinesis:GetRecords
        - kinesis:ListShards
        - kinesis:DescribeStreamSummary
        - kinesis:RegisterStreamConsumer
      Resource: 
       - "arn:aws:kinesis:us-west-2:768127979193:stream/filecoin-archive-${self:provider.stage}"
  domain:
    dev: api-dev.space.storage
    stg: api-stg.space.storage
    prd: api.space.storage
  appsyncUrl:
    dev: https://7w65cjs2fnbwzdsltmxj427wfu.appsync-api.us-west-2.amazonaws.com/graphql
    stg: https://h6qbvxquqjg5direndhm7ugaj4.appsync-api.us-west-2.amazonaws.com/graphql
    prd: https://b6756lokszgovfg2lkge3t4kai.appsync-api.us-west-2.amazonaws.com/graphql
  appSyncId:
    dev: 5hfpy7azrrbwzfqlworbze5cqm
    stg: eqz6jpndcvg27fhrcmzzdb7byi
    prd: tbnqabijsrasxp6sokt4y3avxu

plugins:
  - serverless-jetpack
  - serverless-domain-manager

custom:
  jetpack:
    base: '../../'
  customDomain:
    domainName: ${self:provider.domain.${self:provider.stage}}
    certificateArn: ${ssm:space-api-edge-certificate-arn}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
package:
  exclude:
    - '**/node_modules/aws-sdk/**' # included on Lambda.

functions:
  authorizer:
    handler: dist/authorizer.handler
    environment:
      JWT_SECRET: ${ssm:txl-hub-jwt-secret-${self:provider.stage}~true}

  identities:
    handler: dist/identities.handler
    environment:
      ENV: ${self:provider.stage}
    events:
      - http:
          path: /identities
          method: GET
          cors: true

  identitiesQuery:
    handler: dist/identitiesQuery.handler
    environment:
      ENV: ${self:provider.stage}
    events:
      - http:
          path: /identities_query
          method: POST
          cors: true

  updateIdentity:
    memorySize: 128
    handler: dist/updateIdentity.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity
          method: PUT
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/updateIdentity.json)}
  deleteIdentity:
    memorySize: 128
    handler: dist/deleteIdentity.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity
          method: DELETE
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
  createProof:
    memorySize: 128
    handler: dist/createProof.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/proofs
          method: POST
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/createProof.json)}
  addEthAddress:
    memorySize: 128
    handler: dist/addEthAddress.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /add-eth-address
          method: POST
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
          request:
            schema:
              application/json: ${file(schemas/addEthAddress.json)}

  share:
    memorySize: 128
    handler: dist/sendShareEmail.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /share
          method: POST
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0

  archiveHash:
    memorySize: 128
    handler: dist/archiveHash.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /archiveHash
          method: POST
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0

  dealStatus:
    memorySize: 128
    handler: dist/getDealStatus.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
      APPSYNC_URL: ${self:provider.appsyncUrl.${self:provider.stage}}
    events:
      - http:
          path: /dealStatus
          method: GET
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0

  uploadAvatar:
    memorySize: 128
    handler: dist/uploadAvatar.handler
    environment:
      REGION: ${self:provider.region}
      IPFS_HOST: ${ssm:space-ipfs-host-${self:provider.stage}~true}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/avatar
          method: POST
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0
    # VPC configuration is needed if your IPFS node sits inside private subnet
    vpc:
      securityGroupIds:
        - ${ssm:space-ipfs-sg}
      subnetIds:
        - ${ssm:space-ipfs-subnet}
  addresses:
    memorySize: 128
    handler: dist/addresses.handler
    environment:
      REGION: ${self:provider.region}
      ENV: ${opt:stage}
    events:
      - http:
          path: /identity/addresses
          method: GET
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 0

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
