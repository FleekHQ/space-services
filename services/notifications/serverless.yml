service:
  name: ${self:provider.appName}-notifications

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage}
  appName: space
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        - "arn:aws:ssm:${self:provider.region}:*:parameter/*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource:
        - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
        - Fn::Join:
          - ""
          - - Fn::ImportValue: 'AppDynamoDbTableArn-${self:provider.stage}'
            - "/*"
  # domain:
  #   dev: auth-dev.space.storage
  #   stg: auth-stg.space.storage
  #   prd: auth.space.storage

plugins:
  - serverless-jetpack
  # - serverless-domain-manager

custom:
  jetpack:
    base: "../../"
  # customDomain:
  #   websocket:
  #     domainName: ${self:provider.domain.${self:provider.stage}}
  #     certificateArn: ${ssm:space-api-certificate-arn}
  #     basePath: ''
  #     stage: ${self:provider.stage}
  #     createRoute53Record: false
  #     endpointType: 'regional'

package:
  exclude:
    - "**/node_modules/aws-sdk/**" # included on Lambda.

functions:
  wsDefault:
    handler: dist/default.handler
    events:
      - websocket: $connect
      - websocket: $default
  wsDisconnect:
    handler: dist/default.handler
    events:
      - websocket: $disconnect
    environment:
      ENV: ${opt:stage}
  auth:
    handler: dist/auth.handler
    timeout: 60
    events:
      - websocket: token
    environment:
      ENV: ${opt:stage}
      JWT_SECRET: ${ssm:txl-hub-jwt-secret-${self:provider.stage}~true}
      APIG_ENDPOINT:
        Fn::Join:
          - ''
          - - Ref: WebsocketsApi
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${self:provider.stage}